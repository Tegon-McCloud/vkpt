#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "../shader_include/definitions.glsl"
#include "../shader_include/util.glsl"
#include "../shader_include/microfacet.glsl"

layout(shaderRecordEXT, std430) buffer sbtData {
    float ior;
    float roughness;
};

layout(location = 0) callableDataInEXT brdfEvaluation evaluation;


float evalPhaseFunction(vec3 wi, vec3 wo, bool wi_outside, bool wo_outside) {

    float ior_rel = wi_outside ? 1.0 / ior : ior;

    if (wi_outside == wo_outside) {
        vec3 wm = normalize(wi + wo);

    } else {
        vec3 wh = -normalize(ior_rel * wi + wo);
        wh *= (wi_outside) ? (sign(wh.z)) : (-sign(wh.z));

        if (dot(wh, wi) < 0.0) {
            return 0.0;
        }

        float value;

        if (wi_outside) {        
            float reflectance = 1.0;


        }
            value = (1.0 - )
        

    }



    return 0.0;

} 

vec3 randomWalk(vec3 w, inout float weight, float alpha, float alpha_sq, float ior_rel) {
    float height = 1.0 + invHeightCdfUniform(0.999);

    bool outside = w.z < 0.0;

    if (!outside) {
        w.z = -w.z;
    }

    for (int i = 0; i < 32; i++) {

        bool escaped;

        height = sampleHeightGgxUniform(w, height, escaped, alpha_sq, evaluation.rand_state);

        if (escaped) {
            if (!outside) {
                w.z = -w.z;
            }

            return w;
        }

        bool transmitted;

        w = sampleDielectricPhaseFunction(
            -w,
            weight,
            transmitted,
            alpha,
            outside ? ior_rel : 1.0 / ior_rel,
            evaluation.rand_state
        );

        if(transmitted) {
            w.z = -w.z;
            height = -height;
            outside = !outside;
        }
    }

    return vec3(0.0);
}

void main() {


    float alpha = roughness;    
    float alpha_sq = alpha * alpha;

    float weight = 1.0;

    vec3 w = -evaluation.wo;
    float ior_rel = 1.0 / ior;

    w = randomWalk(w, weight, alpha, alpha_sq, ior_rel);

    if (w == vec3(0.0)) {
        evaluation.wi = vec3(0.0);
        evaluation.weight = vec3(0.0);
        return;
    }

    evaluation.wi = w;
    evaluation.weight = vec3(weight);
}