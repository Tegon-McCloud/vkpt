#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "../shader_include/definitions.glsl"
#include "../shader_include/util.glsl"
#include "../shader_include/microfacet.glsl"

layout(shaderRecordEXT, std430) buffer sbtData {
    float ior;
    float roughness;
};

layout(location = 0) callableDataInEXT brdfEvaluation evaluation;

void main() {

    float alpha = roughness;
    float alpha_sq = alpha * alpha;

    vec3 wo = evaluation.wo;
    bool outside = wo.z > 0.0;

    float ior_rel;

    if (outside) {
        ior_rel = 1.0 / ior;
    } else {
        ior_rel = ior;
    }

    vec3 wm;

    if (outside) {
        wm = sampleVndfGgx(wo, alpha, evaluation.rand_state);
    } else {
        wm = -sampleVndfGgx(-wo, alpha, evaluation.rand_state);
    }

    float cos_theta_om = dot(wo, wm);

    if (cos_theta_om < 0.0) {
        evaluation.wi = vec3(0.0, 0.0, 1.0);
        evaluation.weight = vec3(1000.0, 0.0, 1000.0);
        return;
    }

    float reflectance = 1.0;

    float sin_theta_tm_sq = ior_rel * ior_rel * (1.0 - cos_theta_om * cos_theta_om);
    float cos_theta_tm;

    if (sin_theta_tm_sq < 1.0) {
        cos_theta_tm = -sqrt(1.0 - sin_theta_tm_sq);
        reflectance = reflectanceFresnel(cos_theta_om, -cos_theta_tm, ior_rel, 1.0);
    }

    vec3 wi;
    float cos_theta_im;

    if (rnd(evaluation.rand_state) < reflectance) {
        wi = 2.0 * dot(wo, wm) * wm - wo;
        cos_theta_im = cos_theta_om;
    } else {
        wi = (ior_rel * cos_theta_om + cos_theta_tm) * wm - ior_rel * wo;
        cos_theta_im = cos_theta_tm;
    }
    
    // if we reflected/refracted into the microsurface 
    // happens if:
    // cos_theta_im > 0.0 (reflection), wi.z < 0.0 (entering the object), outside == true
    // cos_theta_im < 0.0 (refraction), wi.z > 0.0 (leaving the object),  outside == true
    // cos_theta_im > 0.0 (reflection), wi.z > 0.0 (leaving the object),  outside == false 
    // cos_theta_im < 0.0 (refraction), wi.z < 0.0 (entering the object), outside == false 
    if ((cos_theta_im * wi.z < 0.0) == outside) {
        evaluation.wi = vec3(0.0);
        return;
    }
    
    // float geometry_factor = maskingShadowingGgx(abs(wi.z), abs(wo.z), alpha_sq) / maskingGgx(abs(wo.z), alpha_sq);
    float geometry_factor = maskingGgx(abs(wi.z), alpha_sq);

    evaluation.weight = vec3(geometry_factor);
    evaluation.wi = wi;
}