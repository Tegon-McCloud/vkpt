#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "../shader_include/definitions.glsl"
#include "../shader_include/util.glsl"
#include "../shader_include/microfacet.glsl"

layout(shaderRecordEXT, std430) buffer sbtData {
    float ior;
    float roughness;
};

layout(location = 0) callableDataInEXT brdfEvaluation evaluation;

vec3 sampleDielectricPhaseFunction2(
    vec3 wo,
    out bool transitioned,
    inout float weight,
    float alpha,
    float ior_rel,
    inout uint rand_state
) {
    vec3 wm = sampleVndfGgx(wo, alpha, rand_state);

    float cos_theta_om = dot(wo, wm);

    float reflectance = 1.0;

    float sin_theta_tm_sq = ior_rel * ior_rel * (1.0 - cos_theta_om * cos_theta_om);
    float cos_theta_tm;

    if (sin_theta_tm_sq < 1.0) {
        cos_theta_tm = -sqrt(1.0 - sin_theta_tm_sq);
        reflectance = reflectanceFresnel(cos_theta_om, -cos_theta_tm, ior_rel, 1.0);
    }

    vec3 wi;
    
    if(rnd(rand_state) < reflectance) {
        wi = 2.0 * cos_theta_om * wm - wo;
        transitioned = false;
    } else {
        wi = (ior_rel * cos_theta_om + cos_theta_tm) * wm - ior_rel * wo;
        transitioned = true;
    }

    return wi;
}


void main() {

    float alpha = roughness;    
    float alpha_sq = alpha * alpha;

    float ior_rel = 1.0 / ior;

    vec3 w = -evaluation.wo;
    float height = 1.0 + invHeightCdfUniform(0.999);
    float weight = 1.0;

    bool flipped = w.z > 0.0;

    if (flipped) {
        w.z = -w.z;
        height = -height;
        ior_rel = 1.0 / ior_rel;
    }

    for (int i = 0; i < 32; i++) {
        bool escaped;

        height = sampleHeightGgxUniform(w, height, escaped, alpha_sq, evaluation.rand_state);

        if (escaped) {

            if(flipped) {
                w.z = -w.z;
            }
            evaluation.wi = w;
            evaluation.weight = vec3(weight);
            return;
        }

        bool transitioned;

        w = sampleDielectricPhaseFunction2(
            -w,
            transitioned,
            weight,
            alpha,
            ior_rel,
            evaluation.rand_state
        );

        if(transitioned) {
            w.z = -w.z;
            height = -height;
            ior_rel = 1.0 / ior_rel;
            flipped = !flipped;
        }

        // w = sampleConductorPhaseFunction(-w, weight, alpha, evaluation.rand_state);
    }

    evaluation.wi = vec3(0.0);
    evaluation.weight = vec3(0.0);
}