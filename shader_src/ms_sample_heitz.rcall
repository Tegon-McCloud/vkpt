// code in this file is adapted from the supplemental material of Heitz et al.

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "../shader_include/definitions.glsl"
#include "../shader_include/util.glsl"
#include "../shader_include/microfacet.glsl"

layout(shaderRecordEXT, std430) buffer sbtData {
    float ior;
    float roughness;
};

layout(location = 0) callableDataInEXT brdfEvaluation evaluation;

vec3 sampleConductorPhaseFunction(
    vec3 wi,
    bool wi_above,
    out bool wo_above,
    float alpha, 
    float alpha_sq,
    float ior_rel, // ior_i / ior_o
    inout uint rand_state
) {
    vec3 wm;

    if (wi_above) {
        wm = sampleVndfGgx(wi, alpha, rand_state);
    } else {
        wm = -sampleVndfGgx(-wi, alpha, rand_state);
    }

    float cos_theta_im = dot(wi, wm);

    vec3 wo = 2.0 * cos_theta_im * wm - wi;
    wo_above = wi_above;

    return wo;
}

vec3 sampleDielectricPhaseFunction(
    vec3 wi,
    bool wi_above,
    out bool wo_above,
    float alpha, 
    float alpha_sq,
    float ior_rel,
    inout uint rand_state
) {
    vec3 wm;

    if (wi_above) {
        wm = sampleVndfGgx(wi, alpha, rand_state);
    } else {
        wm = -sampleVndfGgx(-wi, alpha, rand_state);
    }

    float cos_theta_im = dot(wi, wm);

    float reflectance = 1.0;

    float sin_theta_tm_sq = ior_rel * ior_rel * (1.0 - cos_theta_im * cos_theta_im);
    float cos_theta_tm;

    if (sin_theta_tm_sq < 1.0) {
        cos_theta_tm = sqrt(1.0 - sin_theta_tm_sq);
        reflectance = reflectanceFresnel(cos_theta_im, cos_theta_tm, ior_rel, 1.0);
    }

    float u = rnd(rand_state);
    vec3 wo;

    if(u < reflectance) {
        wo = 2.0 * cos_theta_im * wm - wi;
        wo_above = wi_above;
    } else {
        wo = (ior_rel * cos_theta_im - cos_theta_tm) * wm - ior_rel * wi;
        wo_above = !wi_above;
    }

    return wo;
}

vec3 randomWalk(vec3 w) {
    float alpha = roughness;
    float alpha_sq = alpha * alpha;

    bool above = w.z < 0.0;

    float height = (above ? 1.0 : -1.0) * (1.0 + invHeightCdfUniform(0.999));
    
    for (int i = 0; i < 32; i++) {

        bool escaped;

        if(above) {
            height = sampleHeightGgxUniform(w, height, escaped, alpha_sq, evaluation.rand_state);
        } else {
            height = -sampleHeightGgxUniform(-w, -height, escaped, alpha_sq, evaluation.rand_state);
        }

        if (escaped) {
            return w;
        }

        w = sampleDielectricPhaseFunction(
            -w,
            above,
            above,
            alpha,
            alpha_sq,
            above ? 1.0 / ior : ior,
            evaluation.rand_state
        );
    }

    return vec3(0.0);
}

void main() {
    vec3 w = -evaluation.wo;
    evaluation.wi = randomWalk(w);
    evaluation.weight = vec3(1.0);
}
