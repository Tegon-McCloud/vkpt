#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "../shader_include/definitions.glsl"
#include "../shader_include/random.glsl"
#include "../shader_include/util.glsl"

layout(set = 0, binding = 2) uniform usampler2D environment_map;

layout(location = 0) callableDataInEXT lightSample light_sample;

void main() {

    vec3 wi = sampleUniformSphere(light_sample.rand_state);

    vec2 uv = vec2(
        atan(wi.x, wi.z) / (2.0 * pi),
        acos(wi.y) / pi
    );

    uvec4 env_rgbe = texture(environment_map, uv);
    vec3 env_radiance = (1.0 / 256.0) * vec3(env_rgbe.rgb) * pow(2.0, float(env_rgbe.a) - 128.0);
    
    light_sample.wi_world = wi;
    light_sample.value = 4.0 * pi * env_radiance;
}