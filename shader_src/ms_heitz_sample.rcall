#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable

#include "../shader_include/definitions.glsl"
#include "../shader_include/util.glsl"
#include "../shader_include/microfacet.glsl"

layout(shaderRecordEXT, std430) buffer sbtData {
    float ior;
    float roughness;
};

layout(location = 0) callableDataInEXT brdfEvaluation evaluation;

vec3 sampleConductorPhaseFunction(
    vec3 wo,
    inout float weight,
    float alpha,
    inout uint rand_state
) {
    vec3 wm = sampleVndfGgx(wo, alpha, rand_state);
    float cos_theta_om = dot(wo, wm);
    return 2.0 * cos_theta_om * wm - wo;
}

vec3 sampleDielectricPhaseFunction(
    vec3 wo,
    bool wo_outside,
    out bool wi_outside,
    inout float weight,
    float alpha,
    float ior,
    inout uint rand_state
) {
    float ior_rel;

    if (wo_outside) {
        ior_rel = 1.0 / ior;
    } else {
        ior_rel = ior;
    }

    vec3 wm;

    if (wo_outside) {
        wm = sampleVndfGgx(wo, alpha, rand_state);
    } else {
        wm = -sampleVndfGgx(-wo, alpha, rand_state);
    }

    float cos_theta_om = dot(wo, wm);

    float reflectance = 1.0;

    float sin_theta_tm_sq = ior_rel * ior_rel * (1.0 - cos_theta_om * cos_theta_om);
    float cos_theta_tm;

    if (sin_theta_tm_sq < 1.0) {
        cos_theta_tm = -sqrt(1.0 - sin_theta_tm_sq);
        reflectance = reflectanceFresnel(cos_theta_om, -cos_theta_tm, ior_rel, 1.0);
    }

    vec3 wi;
    
    if(rnd(rand_state) < reflectance) {
        wi = 2.0 * cos_theta_om * wm - wo;
        wi_outside = wo_outside;
    } else {
        wi = (ior_rel * cos_theta_om + cos_theta_tm) * wm - ior_rel * wo;
        wi_outside = !wo_outside;
    }

    return wi;
}

void main() {

    float alpha = roughness;    
    float alpha_sq = alpha * alpha;

    vec3 w = -evaluation.wo;
    float height = 1.0 + invHeightCdfUniform(0.999);
    float weight = 1.0;

    bool outside = w.z < 0.0;

    for (int i = 0; i < 32; i++) {

        bool escaped;

        if (outside) {
            height = sampleHeightGgxUniform(w, height, escaped, alpha_sq, evaluation.rand_state);
        } else {
            height = -sampleHeightGgxUniform(-w, -height, escaped, alpha_sq, evaluation.rand_state);
        }

        if (escaped) {
            evaluation.wi = w;
            evaluation.weight = vec3(weight);
            return;
        }

        w = sampleDielectricPhaseFunction(
            -w,
            outside,
            outside,
            weight,
            alpha,
            ior,
            evaluation.rand_state
        );
        // w = sampleConductorPhaseFunction(-w, weight, alpha, evaluation.rand_state);
    }

    evaluation.wi = vec3(0.0);
    evaluation.weight = vec3(0.0);
}